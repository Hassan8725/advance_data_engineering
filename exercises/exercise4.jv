// Exercise 4:
//  Build an automated data pipeline for the following source:
//  https://mobilithek.info/offers/526718847762190336
//  Direct download link: https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip
// Goal:
//  Download and unzip data
//      Use the “data.csv” in the zip file
//  Reshape data
//      Only use the columns "Geraet", "Hersteller", "Model", "Monat", "Temperatur in °C (DWD)", "Batterietemperatur in °C"
//  There can be multiple temperature measurements per row
//      You can ignore all columns to the right of the first “​​Geraet aktiv”
//  Translate/rename column headers from German to English:
//      “Geraet” to “id”
//      “Hersteller” to “producer”
//      “Model” to “model”
//      “Monat” to “month”
//      “Temperatur in °C (DWD)” to “temperature”
//      “Batterietemperatur in °C” to “battery_temperature”
//  Transform data:
//      Transform temperatures in Celsius to Fahrenheit (formula is (TemperatureInCelsius * 9/5) + 32) in place (keep the same column names)
//      For the columns temperature and battery_temperature
//  Validate data:
//      Use validations as you see fit, e.g., for “Geraet” to be an id over 0
//  Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
//  Write data into a SQLite database called “temperatures.sqlite”, in the table “temperatures”
//  Use Jayvee version 0.4.0
//  Submit as  /exercises/exercise4.jv



pipeline PhoneBatteryTempPipeline
{
    PhoneBatteryTempExtractor
        ->PhoneBatteryTempZipInterpreter
        ->PhoneBatteryTempDataPicker
        ->PhoneBatteryTempTextInterpreter
        ->PhoneBatteryTempCSVInterpreter
        ->PhoneBatteryTempColDataSelector
        ->PhoneBatteryTempColDeleter
        ->PhoneBatteryTempTableDataInterpreter
        ->PhoneBatteryTempTransformerA
        ->PhoneBatteryTempTransformerB
        ->PhoneBatteryTempLoader;


    block PhoneBatteryTempExtractor oftype HttpExtractor {url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip"; }
    block PhoneBatteryTempZipInterpreter oftype ArchiveInterpreter { archiveType: "zip";}
    block PhoneBatteryTempDataPicker oftype FilePicker { path: "/data.csv";}
    block PhoneBatteryTempTextInterpreter oftype TextFileInterpreter {}
    block PhoneBatteryTempCSVInterpreter oftype CSVInterpreter {delimiter: ";"; } 

    block PhoneBatteryTempColDeleter oftype ColumnDeleter { 
        delete: [column F, column G, column H, column I]; 
    }

    block PhoneBatteryTempColDataSelector oftype CellRangeSelector {
        select: range A1:K*;
    }

    constraint Valididconstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: false;
    }

    valuetype Valididtype oftype integer {
        constraints: [ Valididconstraint ];
    } 

    block PhoneBatteryTempTableDataInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype Valididtype, "producer" oftype text, "model" oftype text, "month" oftype integer,
            "temperature" oftype decimal, "battery_temperature" oftype decimal
        ];
    }
    
    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;
        tempFahrenheit: (tempCelsius * 9/5) + 32;
   }
   
    block PhoneBatteryTempTransformerA oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
   }
   block PhoneBatteryTempTransformerB oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
   }

    block PhoneBatteryTempLoader oftype SQLiteLoader 
    { 
        table: "temperatures"; 
        file: "./temperatures.sqlite"; 
    }


}